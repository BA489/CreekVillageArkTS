"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.SignUtil=void 0;const process_utils_1=require("../../utils/process-utils"),array_util_1=require("../../utils/array-util"),sign_command_factory_1=require("./command-builder-impl/sign-command-factory"),ohos_logger_js_1=require("../../utils/log/ohos-logger.js"),module_task_service_1=require("../service/module-task-service"),validate_util_1=require("../../utils/validate-util"),sign_type_enum_js_1=require("../../enum/sign-type-enum.js"),keystore_utils_js_1=require("../../utils/keystore-utils.js"),fs_extra_1=__importDefault(require("fs-extra")),common_const_js_1=require("../../const/common-const.js");class SignUtil{constructor(e,t,i,s){this._log=ohos_logger_js_1.OhosLogger.getLogger(SignUtil.name),this._taskService=e,this._signType=t,this._targetProduct=s,this._signCommandFactory=new sign_command_factory_1.SignCommandFactory(this._taskService.getProjectModel().getCompileApiVersion()),this._pathInfo=i,this._signingConfig=this.getSigningConfig()}sign(e){this.executeSign(e),fs_extra_1.default.existsSync(e.getOutPutFilePath())||e.getSignType()!==sign_type_enum_js_1.SignTypeEnum.SHELL||fs_extra_1.default.copyFileSync(e.getInputFilePath(),e.getOutPutFilePath())}validateBundleName(e,t){const i=this._taskService.getSdkInfo(),s=this._taskService.getProjectModel(),n=this._taskService.isFaMode()?common_const_js_1.CommonConst.CONFIG_JSON:common_const_js_1.CommonConst.APP_CONFIG;if((null==e?void 0:e.getSignType())===sign_type_enum_js_1.SignTypeEnum.HAP||(null==e?void 0:e.getSignType())===sign_type_enum_js_1.SignTypeEnum.HOS_HAP){const e=validate_util_1.ValidateUtil.getBundleNameFromP7b(i,this._signingConfig,t),o=validate_util_1.ValidateUtil.getBundleNameFromHap(this._targetProduct,s);if(o!==e){const t="BundleName in the project configuration does not match that in the SigningConfigs.",i=`Open the project-level build-profile.json5 file. Change the bundleName value \n        to that in the SigningConfigs. Otherwise, go to the ${n} file and change the bundleName value there.\n        BundleName in Project: ${o}, BundleName in SigningConfigs: ${e}.`;this._log._buildError(t)._solution(i)._file(this._taskService.getProjectModel().getProfilePath())._printErrorAndExit()}}}executeSign(e){if(!this._signingConfig)return;const t=this.getSignCommand(e);this._signingConfig!==SignUtil.getDefaultSign()?(this.validateBundleName(e,this._pathInfo),this._taskService instanceof module_task_service_1.ModuleTaskService?new process_utils_1.ProcessUtils(this._taskService.getModuleModel().getName(),`Sign${e.getSignType()}`).executeSync(t):new process_utils_1.ProcessUtils(this._taskService.getProjectModel().getName(),`Sign${e.getSignType()}`).executeSync(t)):new process_utils_1.ProcessUtils(this._taskService.getNode().getName(),`Sign${e.getSignType()}`).executeSync(t)}getSigningConfig(){const e=this._taskService.getProjectModel().getProfileOpt().app,t=this._targetProduct.signingConfig;if(void 0===t)return this._signType===sign_type_enum_js_1.SignTypeEnum.SHELL?SignUtil.getDefaultSign():void(this._signingConfigCheckLogStr=`No signingConfig found for product ${this._targetProduct.name}`);const i=(0,array_util_1.getElementFromArr)(null==e?void 0:e.signingConfigs,t.substring(t.lastIndexOf(".")+1));return void 0===i?this._signType===sign_type_enum_js_1.SignTypeEnum.SHELL?SignUtil.getDefaultSign():void(this._signingConfigCheckLogStr=`Will skip sign '${this._signType}'. No SigningConfigs profile is configured in current project.`):i}static getDefaultSign(){return{material:{storeFile:keystore_utils_js_1.KeyStoreHelper.getDefaultDebugKeyStoreLocation(),storePassword:keystore_utils_js_1.KeyStoreHelper.DEFAULT_STORE_PASS,keyAlias:keystore_utils_js_1.KeyStoreHelper.DEFAULT_ALIAS,keyPassword:keystore_utils_js_1.KeyStoreHelper.DEFAULT_STORE_PASS,signAlg:"",profile:"",certpath:""},name:""}}static isUseDefaultShellSign(e){const t=SignUtil.getDefaultSign().material;return e.storePassword===t.storePassword&&e.keyPassword===t.keyPassword&&e.storeFile===t.storeFile&&e.keyAlias===t.keyAlias}getSignCommand(e){return this._signCommandFactory.createCommandBuilder(this._taskService.getProjectModel(),this._signingConfig,this._taskService.getSdkInfo(),e).getSignCommand()}}exports.SignUtil=SignUtil;