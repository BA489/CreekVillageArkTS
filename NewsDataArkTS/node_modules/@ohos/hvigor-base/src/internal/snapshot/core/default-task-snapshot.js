"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.DefaultTaskSnapshot=void 0;const cache_util_js_1=require("../../cache/util/cache-util.js"),hash_util_js_1=require("../../../util/hash-util.js"),task_built_in_js_1=require("../util/task-built-in.js"),task_input_value_entry_js_1=require("../util/task-input-value-entry.js");var snapshotSerializationReplacer=task_built_in_js_1.TaskBuiltIn.snapshotSerializationReplacer;const lodash_1=require("lodash");class DefaultTaskSnapshot{constructor(t){this._inputs=[],this._successful=!1;const e=t.getNode();this._projectName=e.getProject().getName(),this._moduleName=e.getName(),this._taskName=t.getName(),this._key=(0,cache_util_js_1.getTaskSnapCacheEntryUniqueKey)(this._taskName,e),this._executionId=`${this._key}:${Date.now()}`,t.declareInputs().forEach(((t,e)=>this.addInput(e,t))),this._inputFiles=t.declareInputFiles().collect(),this._outputFiles=t.declareOutputFiles().collect()}getKey(){return this._key}compareTo(t){return this._successful&&this._projectName===t.getProjectName()&&this._moduleName===t.getModuleName()&&this._taskName===t.getTaskName()&&this.compareInputs(t)&&this.compareInputFiles(t)&&this.compareOutputFiles(t)}getModuleName(){return this._moduleName}getTaskName(){return this._taskName}getProjectName(){return this._projectName}isSuccessful(){return this._successful}setExecutedSuccessful(){this._successful=!0}addInput(t,e){const s=this._inputs.findIndex((e=>e.getName()===t));s<0||this._inputs.splice(s,1),this._inputs.push(new task_input_value_entry_js_1.ValueEntry(t,e))}getInputs(){return this._inputs}getExecutionId(){return this._executionId}compareInputs(t){const e=t.getInputs();if(this._inputs.length!==e.length)return!1;const s=(t,e)=>t.getName()>e.getName()?1:e.getName()>t.getName()?-1:0;let i=(0,hash_util_js_1.createHash)();this._inputs.sort(s).forEach((t=>i.update(t.getHash())));const u=i.digest("hex");i=(0,hash_util_js_1.createHash)(),t.getInputs().sort(s).forEach((t=>i.update(t.getHash())));return u===i.digest("hex")}compareInputFiles(t){return DefaultTaskSnapshot.compareFiles(this._inputFiles,t.getInputFiles())}compareOutputFiles(t){return DefaultTaskSnapshot.compareFiles(this._outputFiles,t.getOutputFiles())}static compareFiles(t,e){if(t.size!==e.size)return!1;for(const[s,i]of t){if(!e.has(s))return!1;const t=e.get(s);if(!(0,lodash_1.isEqual)(i,t))return!1}return!0}getInputFiles(){return this._inputFiles}getOutputFiles(){return this._outputFiles}stringify(){return JSON.stringify(this,snapshotSerializationReplacer)}}exports.DefaultTaskSnapshot=DefaultTaskSnapshot;